import React, { useState, useEffect } from "react";
import { useParams, Link } from "react-router-dom";
import { fetchRaffleDetails, registerParticipant } from "../../api";
import "./RaffleDetails.css";

const RaffleDetails = () => {
  const { raffleId } = useParams(); // Use `raffleId` from the URL
  const [raffle, setRaffle] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedAnswer, setSelectedAnswer] = useState("");

  useEffect(() => {
    const loadRaffleDetails = async () => {
      if (!raffleId) {
        setError("Invalid raffle ID.");
        setLoading(false);
        return;
      }

      try {
        const data = await fetchRaffleDetails(raffleId); // Fetch raffle details by ID
        setRaffle(data);
      } catch (err) {
        console.error("[ERROR] Failed to fetch raffle details:", err);
        setError("Failed to fetch raffle details.");
      } finally {
        setLoading(false);
      }
    };

    loadRaffleDetails();
  }, [raffleId]);

  const handleSubmit = async () => {
    if (!selectedAnswer) {
      alert("Please select an answer before submitting.");
      return;
    }

    try {
      await registerParticipant(raffleId, {
        participantId: "user123", // Replace with actual user ID
        name: "John Doe", // Replace with actual user name
        answer: selectedAnswer,
      });
      alert("Answer submitted successfully!");
    } catch (err) {
      console.error("[ERROR] Failed to submit answer:", err);
      alert("Failed to submit answer. Please try again.");
    }
  };

  if (loading) return <p>Loading raffle details...</p>;
  if (error) return <p>{error}</p>;

  return (
    <div className="raffle-details">
      <h1>Raffle Details</h1>
      <div className="raffle-overview">
        <p><strong>Raffle ID:</strong> {raffle.raffleId}</p>
        <p><strong>Prize Amount:</strong> {raffle.prizeAmount} SOL</p>
        <p><strong>Entry Fee:</strong> {raffle.entryFee} SOL</p>
        <p><strong>Start Time:</strong> {new Date(raffle.startTime).toLocaleString()}</p>
        <p><strong>End Time:</strong> {new Date(raffle.endTime).toLocaleString()}</p>
        <p><strong>Question:</strong> {raffle.question}</p>
      </div>

      {raffle.questionOptions && raffle.questionOptions.length > 0 && (
        <div className="raffle-question">
          <h3>Answer the Question</h3>
          {raffle.questionOptions.map((option, index) => (
            <label key={index} className="answer-option">
              <input
                type="radio"
                name="answer"
                value={option}
                checked={selectedAnswer === option}
                onChange={(e) => setSelectedAnswer(e.target.value)}
              />
              {option}
            </label>
          ))}
        </div>
      )}

      <button onClick={handleSubmit} disabled={!selectedAnswer}>
        Submit Answer
      </button>

      <div className="navigation">
        <Link to="/">Back to Active Raffles</Link>
      </div>
    </div>
  );
};

export default RaffleDetails;
