use anchor_lang::prelude::*;
use solana_program::hash::hash;

declare_id!("82L7Sf43Kq8g6yktLBquMZ8H2K8x5GHmaZLopTAE6thM");

#[program]
pub mod raffle_program {
    use super::*;

    /// Initialize a new raffle.
    pub fn initialize_raffle(
        ctx: Context<InitializeRaffle>,
        name: String,
        ticket_price: u64,
        max_tickets: u64,
        min_profitability_threshold: u64, // Minimum SOL for profitability
        raffle_duration: i64,            // Duration in seconds
        correct_answer: String,          // Correct answer for the skill-based question
    ) -> Result<()> {
        let raffle = &mut ctx.accounts.raffle;
        raffle.name = name;
        raffle.ticket_price = ticket_price;
        raffle.max_tickets = max_tickets;
        raffle.min_profitability_threshold = min_profitability_threshold;
        raffle.end_time = Clock::get()?.unix_timestamp + raffle_duration;
        raffle.correct_answer = correct_answer;
        raffle.tickets_sold = 0;
        raffle.is_drawn = false;
        raffle.is_extended = false;
        raffle.winner = None;
        Ok(())
    }

    /// Buy a ticket for the raffle.
    pub fn buy_ticket(ctx: Context<BuyTicket>, answer: String) -> Result<()> {
        let raffle = &mut ctx.accounts.raffle;
        require!(
            Clock::get()?.unix_timestamp < raffle.end_time,
            RaffleError::RaffleEnded
        );
        require!(
            raffle.tickets_sold < raffle.max_tickets,
            RaffleError::RaffleFull
        );

        // Check if the user's answer is correct.
        let is_correct = answer == raffle.correct_answer;
        raffle.tickets_sold += 1;

        // Record the user's entry.
        let entry = &mut ctx.accounts.entry;
        entry.user = ctx.accounts.user.key();
        entry.is_correct = is_correct;

        Ok(())
    }

    /// Perform the raffle draw.
    pub fn perform_draw(ctx: Context<PerformDraw>) -> Result<()> {
        let raffle = &mut ctx.accounts.raffle;
    
        require!(
            Clock::get()?.unix_timestamp >= raffle.end_time,
            RaffleError::RaffleStillOngoing
        );
        require!(!raffle.is_drawn, RaffleError::WinnerAlreadyDrawn);
    
        let total_correct_entries = ctx.remaining_accounts.len() as u64;
        require!(total_correct_entries > 0, RaffleError::NoValidEntries);
    
        // Generate randomness using Solana's native hash function.
        let blockhash = Clock::get()?.slot;
        let random_seed = hash(&blockhash.to_le_bytes());
    
        // Convert the random bytes to u64 (handle errors explicitly)
        let random_bytes = random_seed.to_bytes();
        let random_slice: [u8; 8] = random_bytes[..8].try_into().map_err(|_| RaffleError::InvalidRandomness)?;
        let random_value = u64::from_le_bytes(random_slice);
    
        // Use randomness to select a winner.
        let winner_index = (random_value % total_correct_entries) as usize;
        let winner_account = &ctx.remaining_accounts[winner_index];
        raffle.winner = Some(*winner_account.key);
        raffle.is_drawn = true;
    
        Ok(())
    }
    
    /// Extend the raffle duration if the threshold is not met.
    pub fn extend_raffle(ctx: Context<ExtendRaffle>, extension_duration: i64) -> Result<()> {
        let raffle = &mut ctx.accounts.raffle;

        require!(
            Clock::get()?.unix_timestamp >= raffle.end_time,
            RaffleError::RaffleStillOngoing
        );
        require!(
            !raffle.is_drawn && !raffle.is_extended,
            RaffleError::CannotExtendRaffle
        );

        let total_raised = raffle.tickets_sold * raffle.ticket_price;
        require!(
            total_raised < raffle.min_profitability_threshold,
            RaffleError::ThresholdMet
        );

        raffle.end_time += extension_duration;
        raffle.is_extended = true;

        Ok(())
    }

    /// Refund participants if the raffle threshold is not met after extension.
    pub fn refund_participants(ctx: Context<RefundParticipants>) -> Result<()> {
        let raffle = &mut ctx.accounts.raffle;

        require!(
            Clock::get()?.unix_timestamp >= raffle.end_time,
            RaffleError::RaffleStillOngoing
        );
        require!(
            raffle.tickets_sold * raffle.ticket_price < raffle.min_profitability_threshold,
            RaffleError::ThresholdMet
        );

        raffle.is_drawn = true;
        Ok(())
    }
}

/// Define the accounts for initializing a raffle.
#[derive(Accounts)]
pub struct InitializeRaffle<'info> {
    #[account(init, payer = user, space = 8 + 256)]
    pub raffle: Account<'info, Raffle>,
    #[account(mut)]
    pub user: Signer<'info>,
    pub system_program: Program<'info, System>,
}

/// Define the accounts for buying a ticket.
#[derive(Accounts)]
pub struct BuyTicket<'info> {
    #[account(mut)]
    pub raffle: Account<'info, Raffle>,
    #[account(init, payer = user, space = 8 + 64)]
    pub entry: Account<'info, Entry>,
    #[account(mut)]
    pub user: Signer<'info>,
    pub system_program: Program<'info, System>,
}

/// Define the accounts for performing the raffle draw.
#[derive(Accounts)]
pub struct PerformDraw<'info> {
    #[account(mut)]
    pub raffle: Account<'info, Raffle>,
}

/// Define the accounts for extending the raffle duration.
#[derive(Accounts)]
pub struct ExtendRaffle<'info> {
    #[account(mut)]
    pub raffle: Account<'info, Raffle>,
    #[account(mut)]
    pub user: Signer<'info>,
}

/// Define the accounts for refunding participants.
#[derive(Accounts)]
pub struct RefundParticipants<'info> {
    #[account(mut)]
    pub raffle: Account<'info, Raffle>,
}

/// Define the raffle state.
#[account]
pub struct Raffle {
    pub name: String,
    pub ticket_price: u64,
    pub max_tickets: u64,
    pub tickets_sold: u64,
    pub min_profitability_threshold: u64,
    pub end_time: i64,
    pub is_drawn: bool,
    pub is_extended: bool,
    pub correct_answer: String,
    pub winner: Option<Pubkey>,
}

/// Define the user entries.
#[account]
pub struct Entry {
    pub user: Pubkey,
    pub is_correct: bool,
}

/// Define custom errors for the program.
#[error_code]
pub enum RaffleError {
    #[msg("The raffle is already full.")]
    RaffleFull,
    #[msg("The raffle has already ended.")]
    RaffleEnded,
    #[msg("The raffle is still ongoing.")]
    RaffleStillOngoing,
    #[msg("The winner has already been drawn.")]
    WinnerAlreadyDrawn,
    #[msg("The profitability threshold has already been met.")]
    ThresholdMet,
    #[msg("Cannot extend the raffle again.")]
    CannotExtendRaffle,
    #[msg("There are no valid entries for the raffle.")]
    NoValidEntries,
    #[msg("Invalid randomness generated.")]
    InvalidRandomness, // New error
}
